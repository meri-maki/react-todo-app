{"ast":null,"code":"import _slicedToArray from \"/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useMemo, useRef, useEffect, useState, useContext } from 'react';\nimport { useDndContext, getClientRect, useDroppable, useDraggable, closestCorners, getFirstCollision, getScrollableAncestors, KeyboardCode } from '@dnd-kit/core';\nimport { useUniqueId, useIsomorphicLayoutEffect, CSS, useCombinedRefs, isKeyboardEvent, subtract } from '@dnd-kit/utilities';\n\n/**\r\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\r\n */\nfunction arrayMove(array, from, to) {\n  var newArray = array.slice();\n  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);\n  return newArray;\n}\n\n/**\r\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\r\n */\nfunction arraySwap(array, from, to) {\n  var newArray = array.slice();\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n  return newArray;\n}\nfunction getSortedRects(items, rects) {\n  return items.reduce(function (accumulator, id, index) {\n    var rect = rects.get(id);\n    if (rect) {\n      accumulator[index] = rect;\n    }\n    return accumulator;\n  }, Array(items.length));\n}\nfunction isValidIndex(index) {\n  return index !== null && index >= 0;\n}\nfunction itemsEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction normalizeDisabled(disabled) {\n  if (typeof disabled === 'boolean') {\n    return {\n      draggable: disabled,\n      droppable: disabled\n    };\n  }\n  return disabled;\n}\n\n// To-do: We should be calculating scale transformation\nvar defaultScale = {\n  scaleX: 1,\n  scaleY: 1\n};\nvar horizontalListSortingStrategy = function horizontalListSortingStrategy(_ref) {\n  var _rects$activeIndex;\n  var rects = _ref.rects,\n    fallbackActiveRect = _ref.activeNodeRect,\n    activeIndex = _ref.activeIndex,\n    overIndex = _ref.overIndex,\n    index = _ref.index;\n  var activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;\n  if (!activeNodeRect) {\n    return null;\n  }\n  var itemGap = getItemGap(rects, index, activeIndex);\n  if (index === activeIndex) {\n    var newIndexRect = rects[overIndex];\n    if (!newIndexRect) {\n      return null;\n    }\n    return _objectSpread({\n      x: activeIndex < overIndex ? newIndexRect.left + newIndexRect.width - (activeNodeRect.left + activeNodeRect.width) : newIndexRect.left - activeNodeRect.left,\n      y: 0\n    }, defaultScale);\n  }\n  if (index > activeIndex && index <= overIndex) {\n    return _objectSpread({\n      x: -activeNodeRect.width - itemGap,\n      y: 0\n    }, defaultScale);\n  }\n  if (index < activeIndex && index >= overIndex) {\n    return _objectSpread({\n      x: activeNodeRect.width + itemGap,\n      y: 0\n    }, defaultScale);\n  }\n  return _objectSpread({\n    x: 0,\n    y: 0\n  }, defaultScale);\n};\nfunction getItemGap(rects, index, activeIndex) {\n  var currentRect = rects[index];\n  var previousRect = rects[index - 1];\n  var nextRect = rects[index + 1];\n  if (!currentRect || !previousRect && !nextRect) {\n    return 0;\n  }\n  if (activeIndex < index) {\n    return previousRect ? currentRect.left - (previousRect.left + previousRect.width) : nextRect.left - (currentRect.left + currentRect.width);\n  }\n  return nextRect ? nextRect.left - (currentRect.left + currentRect.width) : currentRect.left - (previousRect.left + previousRect.width);\n}\nvar rectSortingStrategy = function rectSortingStrategy(_ref) {\n  var rects = _ref.rects,\n    activeIndex = _ref.activeIndex,\n    overIndex = _ref.overIndex,\n    index = _ref.index;\n  var newRects = arrayMove(rects, overIndex, activeIndex);\n  var oldRect = rects[index];\n  var newRect = newRects[index];\n  if (!newRect || !oldRect) {\n    return null;\n  }\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height\n  };\n};\nvar rectSwappingStrategy = function rectSwappingStrategy(_ref) {\n  var activeIndex = _ref.activeIndex,\n    index = _ref.index,\n    rects = _ref.rects,\n    overIndex = _ref.overIndex;\n  var oldRect;\n  var newRect;\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n  if (!newRect || !oldRect) {\n    return null;\n  }\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height\n  };\n};\n\n// To-do: We should be calculating scale transformation\nvar defaultScale$1 = {\n  scaleX: 1,\n  scaleY: 1\n};\nvar verticalListSortingStrategy = function verticalListSortingStrategy(_ref) {\n  var _rects$activeIndex;\n  var activeIndex = _ref.activeIndex,\n    fallbackActiveRect = _ref.activeNodeRect,\n    index = _ref.index,\n    rects = _ref.rects,\n    overIndex = _ref.overIndex;\n  var activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;\n  if (!activeNodeRect) {\n    return null;\n  }\n  if (index === activeIndex) {\n    var overIndexRect = rects[overIndex];\n    if (!overIndexRect) {\n      return null;\n    }\n    return _objectSpread({\n      x: 0,\n      y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top\n    }, defaultScale$1);\n  }\n  var itemGap = getItemGap$1(rects, index, activeIndex);\n  if (index > activeIndex && index <= overIndex) {\n    return _objectSpread({\n      x: 0,\n      y: -activeNodeRect.height - itemGap\n    }, defaultScale$1);\n  }\n  if (index < activeIndex && index >= overIndex) {\n    return _objectSpread({\n      x: 0,\n      y: activeNodeRect.height + itemGap\n    }, defaultScale$1);\n  }\n  return _objectSpread({\n    x: 0,\n    y: 0\n  }, defaultScale$1);\n};\nfunction getItemGap$1(clientRects, index, activeIndex) {\n  var currentRect = clientRects[index];\n  var previousRect = clientRects[index - 1];\n  var nextRect = clientRects[index + 1];\n  if (!currentRect) {\n    return 0;\n  }\n  if (activeIndex < index) {\n    return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;\n  }\n  return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;\n}\nvar ID_PREFIX = 'Sortable';\nvar Context = /*#__PURE__*/React.createContext({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  disabled: {\n    draggable: false,\n    droppable: false\n  }\n});\nfunction SortableContext(_ref) {\n  var children = _ref.children,\n    id = _ref.id,\n    userDefinedItems = _ref.items,\n    _ref$strategy = _ref.strategy,\n    strategy = _ref$strategy === void 0 ? rectSortingStrategy : _ref$strategy,\n    _ref$disabled = _ref.disabled,\n    disabledProp = _ref$disabled === void 0 ? false : _ref$disabled;\n  var _useDndContext = useDndContext(),\n    active = _useDndContext.active,\n    dragOverlay = _useDndContext.dragOverlay,\n    droppableRects = _useDndContext.droppableRects,\n    over = _useDndContext.over,\n    measureDroppableContainers = _useDndContext.measureDroppableContainers,\n    measuringScheduled = _useDndContext.measuringScheduled;\n  var containerId = useUniqueId(ID_PREFIX, id);\n  var useDragOverlay = Boolean(dragOverlay.rect !== null);\n  var items = useMemo(function () {\n    return userDefinedItems.map(function (item) {\n      return typeof item === 'object' && 'id' in item ? item.id : item;\n    });\n  }, [userDefinedItems]);\n  var isDragging = active != null;\n  var activeIndex = active ? items.indexOf(active.id) : -1;\n  var overIndex = over ? items.indexOf(over.id) : -1;\n  var previousItemsRef = useRef(items);\n  var itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);\n  var disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;\n  var disabled = normalizeDisabled(disabledProp);\n  useIsomorphicLayoutEffect(function () {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers, measuringScheduled]);\n  useEffect(function () {\n    previousItemsRef.current = items;\n  }, [items]);\n  var contextValue = useMemo(function () {\n    return {\n      activeIndex: activeIndex,\n      containerId: containerId,\n      disabled: disabled,\n      disableTransforms: disableTransforms,\n      items: items,\n      overIndex: overIndex,\n      useDragOverlay: useDragOverlay,\n      sortedRects: getSortedRects(items, droppableRects),\n      strategy: strategy\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]);\n  return React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\nvar defaultNewIndexGetter = function defaultNewIndexGetter(_ref) {\n  var id = _ref.id,\n    items = _ref.items,\n    activeIndex = _ref.activeIndex,\n    overIndex = _ref.overIndex;\n  return arrayMove(items, activeIndex, overIndex).indexOf(id);\n};\nvar defaultAnimateLayoutChanges = function defaultAnimateLayoutChanges(_ref2) {\n  var containerId = _ref2.containerId,\n    isSorting = _ref2.isSorting,\n    wasDragging = _ref2.wasDragging,\n    index = _ref2.index,\n    items = _ref2.items,\n    newIndex = _ref2.newIndex,\n    previousItems = _ref2.previousItems,\n    previousContainerId = _ref2.previousContainerId,\n    transition = _ref2.transition;\n  if (!transition || !wasDragging) {\n    return false;\n  }\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n  if (isSorting) {\n    return true;\n  }\n  return newIndex !== index && containerId === previousContainerId;\n};\nvar defaultTransition = {\n  duration: 200,\n  easing: 'ease'\n};\nvar transitionProperty = 'transform';\nvar disabledTransition = /*#__PURE__*/CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear'\n});\nvar defaultAttributes = {\n  roleDescription: 'sortable'\n};\n\n/*\r\n * When the index of an item changes while sorting,\r\n * we need to temporarily disable the transforms\r\n */\n\nfunction useDerivedTransform(_ref) {\n  var disabled = _ref.disabled,\n    index = _ref.index,\n    node = _ref.node,\n    rect = _ref.rect;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    derivedTransform = _useState2[0],\n    setDerivedtransform = _useState2[1];\n  var previousIndex = useRef(index);\n  useIsomorphicLayoutEffect(function () {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      var initial = rect.current;\n      if (initial) {\n        var current = getClientRect(node.current, {\n          ignoreTransform: true\n        });\n        var delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height\n        };\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n  useEffect(function () {\n    if (derivedTransform) {\n      requestAnimationFrame(function () {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n  return derivedTransform;\n}\nfunction useSortable(_ref) {\n  var _ref$animateLayoutCha = _ref.animateLayoutChanges,\n    animateLayoutChanges = _ref$animateLayoutCha === void 0 ? defaultAnimateLayoutChanges : _ref$animateLayoutCha,\n    userDefinedAttributes = _ref.attributes,\n    localDisabled = _ref.disabled,\n    customData = _ref.data,\n    _ref$getNewIndex = _ref.getNewIndex,\n    getNewIndex = _ref$getNewIndex === void 0 ? defaultNewIndexGetter : _ref$getNewIndex,\n    id = _ref.id,\n    localStrategy = _ref.strategy,\n    resizeObserverConfig = _ref.resizeObserverConfig,\n    _ref$transition = _ref.transition,\n    transition = _ref$transition === void 0 ? defaultTransition : _ref$transition;\n  var _useContext = useContext(Context),\n    items = _useContext.items,\n    containerId = _useContext.containerId,\n    activeIndex = _useContext.activeIndex,\n    globalDisabled = _useContext.disabled,\n    disableTransforms = _useContext.disableTransforms,\n    sortedRects = _useContext.sortedRects,\n    overIndex = _useContext.overIndex,\n    useDragOverlay = _useContext.useDragOverlay,\n    globalStrategy = _useContext.strategy;\n  var disabled = normalizeLocalDisabled(localDisabled, globalDisabled);\n  var index = items.indexOf(id);\n  var data = useMemo(function () {\n    return _objectSpread({\n      sortable: {\n        containerId: containerId,\n        index: index,\n        items: items\n      }\n    }, customData);\n  }, [containerId, customData, index, items]);\n  var itemsAfterCurrentSortable = useMemo(function () {\n    return items.slice(items.indexOf(id));\n  }, [items, id]);\n  var _useDroppable = useDroppable({\n      id: id,\n      data: data,\n      disabled: disabled.droppable,\n      resizeObserverConfig: _objectSpread({\n        updateMeasurementsFor: itemsAfterCurrentSortable\n      }, resizeObserverConfig)\n    }),\n    rect = _useDroppable.rect,\n    node = _useDroppable.node,\n    isOver = _useDroppable.isOver,\n    setDroppableNodeRef = _useDroppable.setNodeRef;\n  var _useDraggable = useDraggable({\n      id: id,\n      data: data,\n      attributes: _objectSpread(_objectSpread({}, defaultAttributes), userDefinedAttributes),\n      disabled: disabled.draggable\n    }),\n    active = _useDraggable.active,\n    activatorEvent = _useDraggable.activatorEvent,\n    activeNodeRect = _useDraggable.activeNodeRect,\n    attributes = _useDraggable.attributes,\n    setDraggableNodeRef = _useDraggable.setNodeRef,\n    listeners = _useDraggable.listeners,\n    isDragging = _useDraggable.isDragging,\n    over = _useDraggable.over,\n    setActivatorNodeRef = _useDraggable.setActivatorNodeRef,\n    transform = _useDraggable.transform;\n  var setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  var isSorting = Boolean(active);\n  var displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);\n  var shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  var dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;\n  var strategy = localStrategy != null ? localStrategy : globalStrategy;\n  var finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({\n    rects: sortedRects,\n    activeNodeRect: activeNodeRect,\n    activeIndex: activeIndex,\n    overIndex: overIndex,\n    index: index\n  }) : null;\n  var newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({\n    id: id,\n    items: items,\n    activeIndex: activeIndex,\n    overIndex: overIndex\n  }) : index;\n  var activeId = active == null ? void 0 : active.id;\n  var previous = useRef({\n    activeId: activeId,\n    items: items,\n    newIndex: newIndex,\n    containerId: containerId\n  });\n  var itemsHaveChanged = items !== previous.current.items;\n  var shouldAnimateLayoutChanges = animateLayoutChanges({\n    active: active,\n    containerId: containerId,\n    isDragging: isDragging,\n    isSorting: isSorting,\n    id: id,\n    index: index,\n    items: items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition: transition,\n    wasDragging: previous.current.activeId != null\n  });\n  var derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index: index,\n    node: node,\n    rect: rect\n  });\n  useEffect(function () {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n  useEffect(function () {\n    if (activeId === previous.current.activeId) {\n      return;\n    }\n    if (activeId && !previous.current.activeId) {\n      previous.current.activeId = activeId;\n      return;\n    }\n    var timeoutId = setTimeout(function () {\n      previous.current.activeId = activeId;\n    }, 50);\n    return function () {\n      return clearTimeout(timeoutId);\n    };\n  }, [activeId]);\n  return {\n    active: active,\n    activeIndex: activeIndex,\n    attributes: attributes,\n    data: data,\n    rect: rect,\n    index: index,\n    newIndex: newIndex,\n    items: items,\n    isOver: isOver,\n    isSorting: isSorting,\n    isDragging: isDragging,\n    listeners: listeners,\n    node: node,\n    overIndex: overIndex,\n    over: over,\n    setNodeRef: setNodeRef,\n    setActivatorNodeRef: setActivatorNodeRef,\n    setDroppableNodeRef: setDroppableNodeRef,\n    setDraggableNodeRef: setDraggableNodeRef,\n    transform: derivedTransform != null ? derivedTransform : finalTransform,\n    transition: getTransition()\n  };\n  function getTransition() {\n    if (\n    // Temporarily disable transitions for a single frame to set up derived transforms\n    derivedTransform ||\n    // Or to prevent items jumping to back to their \"new\" position when items change\n    itemsHaveChanged && previous.current.newIndex === index) {\n      return disabledTransition;\n    }\n    if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {\n      return undefined;\n    }\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString(_objectSpread(_objectSpread({}, transition), {}, {\n        property: transitionProperty\n      }));\n    }\n    return undefined;\n  }\n}\nfunction normalizeLocalDisabled(localDisabled, globalDisabled) {\n  var _localDisabled$dragga, _localDisabled$droppa;\n  if (typeof localDisabled === 'boolean') {\n    return {\n      draggable: localDisabled,\n      // Backwards compatibility\n      droppable: false\n    };\n  }\n  return {\n    draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,\n    droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable\n  };\n}\nfunction hasSortableData(entry) {\n  if (!entry) {\n    return false;\n  }\n  var data = entry.data.current;\n  if (data && 'sortable' in data && typeof data.sortable === 'object' && 'containerId' in data.sortable && 'items' in data.sortable && 'index' in data.sortable) {\n    return true;\n  }\n  return false;\n}\nvar directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];\nvar sortableKeyboardCoordinates = function sortableKeyboardCoordinates(event, _ref) {\n  var _ref$context = _ref.context,\n    active = _ref$context.active,\n    collisionRect = _ref$context.collisionRect,\n    droppableRects = _ref$context.droppableRects,\n    droppableContainers = _ref$context.droppableContainers,\n    over = _ref$context.over,\n    scrollableAncestors = _ref$context.scrollableAncestors;\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n    if (!active || !collisionRect) {\n      return;\n    }\n    var filteredContainers = [];\n    droppableContainers.getEnabled().forEach(function (entry) {\n      if (!entry || entry != null && entry.disabled) {\n        return;\n      }\n      var rect = droppableRects.get(entry.id);\n      if (!rect) {\n        return;\n      }\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top < rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top > rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left > rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left < rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n    var collisions = closestCorners({\n      active: active,\n      collisionRect: collisionRect,\n      droppableRects: droppableRects,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null\n    });\n    var closestId = getFirstCollision(collisions, 'id');\n    if (closestId === (over == null ? void 0 : over.id) && collisions.length > 1) {\n      closestId = collisions[1].id;\n    }\n    if (closestId != null) {\n      var activeDroppable = droppableContainers.get(active.id);\n      var newDroppable = droppableContainers.get(closestId);\n      var newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;\n      var newNode = newDroppable == null ? void 0 : newDroppable.node.current;\n      if (newNode && newRect && activeDroppable && newDroppable) {\n        var newScrollAncestors = getScrollableAncestors(newNode);\n        var hasDifferentScrollAncestors = newScrollAncestors.some(function (element, index) {\n          return scrollableAncestors[index] !== element;\n        });\n        var hasSameContainer = isSameContainer(activeDroppable, newDroppable);\n        var isAfterActive = isAfter(activeDroppable, newDroppable);\n        var offset = hasDifferentScrollAncestors || !hasSameContainer ? {\n          x: 0,\n          y: 0\n        } : {\n          x: isAfterActive ? collisionRect.width - newRect.width : 0,\n          y: isAfterActive ? collisionRect.height - newRect.height : 0\n        };\n        var rectCoordinates = {\n          x: newRect.left,\n          y: newRect.top\n        };\n        var newCoordinates = offset.x && offset.y ? rectCoordinates : subtract(rectCoordinates, offset);\n        return newCoordinates;\n      }\n    }\n  }\n  return undefined;\n};\nfunction isSameContainer(a, b) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n  return a.data.current.sortable.containerId === b.data.current.sortable.containerId;\n}\nfunction isAfter(a, b) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n  if (!isSameContainer(a, b)) {\n    return false;\n  }\n  return a.data.current.sortable.index < b.data.current.sortable.index;\n}\nexport { SortableContext, arrayMove, arraySwap, defaultAnimateLayoutChanges, defaultNewIndexGetter, hasSortableData, horizontalListSortingStrategy, rectSortingStrategy, rectSwappingStrategy, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy };","map":{"version":3,"mappings":"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","names":["arrayMove","array","from","to","newArray","slice","splice","length","arraySwap","getSortedRects","items","rects","reduce","accumulator","id","index","rect","get","Array","isValidIndex","itemsEqual","a","b","i","normalizeDisabled","disabled","draggable","droppable","defaultScale","scaleX","scaleY","horizontalListSortingStrategy","_ref","fallbackActiveRect","activeNodeRect","activeIndex","overIndex","itemGap","getItemGap","newIndexRect","x","left","width","y","currentRect","previousRect","nextRect","rectSortingStrategy","newRects","oldRect","newRect","top","height","rectSwappingStrategy","verticalListSortingStrategy","overIndexRect","clientRects","ID_PREFIX","Context","React","createContext","containerId","disableTransforms","useDragOverlay","sortedRects","strategy","SortableContext","children","userDefinedItems","disabledProp","useDndContext","active","dragOverlay","droppableRects","over","measureDroppableContainers","measuringScheduled","useUniqueId","Boolean","useMemo","map","item","isDragging","indexOf","previousItemsRef","useRef","itemsHaveChanged","current","useIsomorphicLayoutEffect","useEffect","contextValue","Provider","value","defaultNewIndexGetter","defaultAnimateLayoutChanges","_ref2","isSorting","wasDragging","newIndex","previousItems","previousContainerId","transition","defaultTransition","duration","easing","transitionProperty","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","useDerivedTransform","node","useState","derivedTransform","setDerivedtransform","previousIndex","initial","getClientRect","ignoreTransform","delta","requestAnimationFrame","useSortable","animateLayoutChanges","userDefinedAttributes","attributes","localDisabled","customData","data","getNewIndex","localStrategy","resizeObserverConfig","useContext","globalDisabled","globalStrategy","normalizeLocalDisabled","sortable","itemsAfterCurrentSortable","useDroppable","updateMeasurementsFor","isOver","setDroppableNodeRef","setNodeRef","useDraggable","activatorEvent","setDraggableNodeRef","listeners","setActivatorNodeRef","transform","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","activeId","previous","shouldAnimateLayoutChanges","timeoutId","setTimeout","clearTimeout","getTransition","isKeyboardEvent","undefined","hasSortableData","entry","directions","KeyboardCode","Down","Right","Up","Left","sortableKeyboardCoordinates","event","context","collisionRect","droppableContainers","scrollableAncestors","includes","code","preventDefault","filteredContainers","getEnabled","forEach","push","collisions","closestCorners","pointerCoordinates","closestId","getFirstCollision","activeDroppable","newDroppable","newNode","newScrollAncestors","getScrollableAncestors","hasDifferentScrollAncestors","some","element","hasSameContainer","isSameContainer","isAfterActive","isAfter","offset","rectCoordinates","newCoordinates","subtract"],"sources":["/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/utilities/arrayMove.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/utilities/arraySwap.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/utilities/getSortedRects.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/utilities/isValidIndex.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/utilities/itemsEqual.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/utilities/normalizeDisabled.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/strategies/horizontalListSorting.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/strategies/rectSorting.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/strategies/rectSwapping.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/strategies/verticalListSorting.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/components/SortableContext.tsx","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/hooks/defaults.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/hooks/utilities/useDerivedTransform.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/hooks/useSortable.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/types/type-guard.ts","/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/@dnd-kit/sortable/src/sensors/keyboard/sortableKeyboardCoordinates.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","/**\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\n */\nexport function arraySwap<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n\n  return newArray;\n}\n","import type {\n  ClientRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  rects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<ClientRect[]>((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {UniqueIdentifier} from '@dnd-kit/core';\n\nexport function itemsEqual(a: UniqueIdentifier[], b: UniqueIdentifier[]) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type {Disabled} from '../types';\n\nexport function normalizeDisabled(disabled: boolean | Disabled): Disabled {\n  if (typeof disabled === 'boolean') {\n    return {\n      draggable: disabled,\n      droppable: disabled,\n    };\n  }\n\n  return disabled;\n}\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  rects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = rects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.left +\n            newIndexRect.width -\n            (activeNodeRect.left + activeNodeRect.width)\n          : newIndexRect.left - activeNodeRect.left,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(rects: ClientRect[], index: number, activeIndex: number) {\n  const currentRect: ClientRect | undefined = rects[index];\n  const previousRect: ClientRect | undefined = rects[index - 1];\n  const nextRect: ClientRect | undefined = rects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.left - (previousRect.left + previousRect.width)\n      : nextRect.left - (currentRect.left + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.left - (currentRect.left + currentRect.width)\n    : currentRect.left - (previousRect.left + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  rects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  rects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  rects,\n  overIndex,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.top +\n            overIndexRect.height -\n            (activeNodeRect.top + activeNodeRect.height)\n          : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  clientRects: ClientRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: ClientRect | undefined = clientRects[index];\n  const previousRect: ClientRect | undefined = clientRects[index - 1];\n  const nextRect: ClientRect | undefined = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.top - (previousRect.top + previousRect.height)\n      : nextRect\n      ? nextRect.top - (currentRect.top + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.top - (currentRect.top + currentRect.height)\n    : previousRect\n    ? currentRect.top - (previousRect.top + previousRect.height)\n    : 0;\n}\n","import React, {useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, ClientRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {Disabled, SortingStrategy} from '../types';\nimport {getSortedRects, itemsEqual, normalizeDisabled} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n  disabled?: boolean | Disabled;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disabled: Disabled;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: ClientRect[];\n  strategy: SortingStrategy;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  disabled: {\n    draggable: false,\n    droppable: false,\n  },\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n  disabled: disabledProp = false,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    measuringScheduled,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo<UniqueIdentifier[]>(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'object' && 'id' in item ? item.id : item\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n  const disabled = normalizeDisabled(disabledProp);\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [\n    itemsHaveChanged,\n    items,\n    isDragging,\n    measureDroppableContainers,\n    measuringScheduled,\n  ]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disabled,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects: getSortedRects(items, droppableRects),\n      strategy,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      activeIndex,\n      containerId,\n      disabled.draggable,\n      disabled.droppable,\n      disableTransforms,\n      items,\n      overIndex,\n      droppableRects,\n      useDragOverlay,\n      strategy,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {useEffect, useRef, useState} from 'react';\nimport {getClientRect, ClientRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<ClientRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true,\n        });\n\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {\n  useDraggable,\n  useDroppable,\n  UseDraggableArguments,\n  UseDroppableArguments,\n} from '@dnd-kit/core';\nimport type {Data} from '@dnd-kit/core';\nimport {CSS, isKeyboardEvent, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {Disabled, SortableData, SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments\n  extends Omit<UseDraggableArguments, 'disabled'>,\n    Pick<UseDroppableArguments, 'resizeObserverConfig'> {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  disabled?: boolean | Disabled;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled: localDisabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  resizeObserverConfig,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disabled: globalDisabled,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n  } = useContext(Context);\n  const disabled: Disabled = normalizeLocalDisabled(\n    localDisabled,\n    globalDisabled\n  );\n  const index = items.indexOf(id);\n  const data = useMemo<SortableData & Data>(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const itemsAfterCurrentSortable = useMemo(\n    () => items.slice(items.indexOf(id)),\n    [items, id]\n  );\n  const {rect, node, isOver, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n    disabled: disabled.droppable,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig,\n    },\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    setActivatorNodeRef,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled: disabled.draggable,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const activeId = active?.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId,\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null,\n  });\n\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n\n  useEffect(() => {\n    if (activeId === previous.current.activeId) {\n      return;\n    }\n\n    if (activeId && !previous.current.activeId) {\n      previous.current.activeId = activeId;\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      previous.current.activeId = activeId;\n    }, 50);\n\n    return () => clearTimeout(timeoutId);\n  }, [activeId]);\n\n  return {\n    active,\n    activeIndex,\n    attributes,\n    data,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && previous.current.newIndex === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (\n      (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent)) ||\n      !transition\n    ) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n\nfunction normalizeLocalDisabled(\n  localDisabled: Arguments['disabled'],\n  globalDisabled: Disabled\n) {\n  if (typeof localDisabled === 'boolean') {\n    return {\n      draggable: localDisabled,\n      // Backwards compatibility\n      droppable: false,\n    };\n  }\n\n  return {\n    draggable: localDisabled?.draggable ?? globalDisabled.draggable,\n    droppable: localDisabled?.droppable ?? globalDisabled.droppable,\n  };\n}\n","import type {\n  Active,\n  Data,\n  DroppableContainer,\n  DraggableNode,\n  Over,\n} from '@dnd-kit/core';\n\nimport type {SortableData} from './data';\n\nexport function hasSortableData<\n  T extends Active | Over | DraggableNode | DroppableContainer\n>(\n  entry: T | null | undefined\n): entry is T & {data: {current: Data<SortableData>}} {\n  if (!entry) {\n    return false;\n  }\n\n  const data = entry.data.current;\n\n  if (\n    data &&\n    'sortable' in data &&\n    typeof data.sortable === 'object' &&\n    'containerId' in data.sortable &&\n    'items' in data.sortable &&\n    'index' in data.sortable\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import {\n  closestCorners,\n  getScrollableAncestors,\n  getFirstCollision,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\nimport {subtract} from '@dnd-kit/utilities';\n\nimport {hasSortableData} from '../../types';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {\n    context: {\n      active,\n      collisionRect,\n      droppableRects,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n    },\n  }\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const rect = droppableRects.get(entry.id);\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top < rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top > rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left > rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left < rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableRects,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null,\n    });\n    let closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId === over?.id && collisions.length > 1) {\n      closestId = collisions[1].id;\n    }\n\n    if (closestId != null) {\n      const activeDroppable = droppableContainers.get(active.id);\n      const newDroppable = droppableContainers.get(closestId);\n      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;\n      const newNode = newDroppable?.node.current;\n\n      if (newNode && newRect && activeDroppable && newDroppable) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const hasSameContainer = isSameContainer(activeDroppable, newDroppable);\n        const isAfterActive = isAfter(activeDroppable, newDroppable);\n        const offset =\n          hasDifferentScrollAncestors || !hasSameContainer\n            ? {\n                x: 0,\n                y: 0,\n              }\n            : {\n                x: isAfterActive ? collisionRect.width - newRect.width : 0,\n                y: isAfterActive ? collisionRect.height - newRect.height : 0,\n              };\n        const rectCoordinates = {\n          x: newRect.left,\n          y: newRect.top,\n        };\n\n        const newCoordinates =\n          offset.x && offset.y\n            ? rectCoordinates\n            : subtract(rectCoordinates, offset);\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nfunction isSameContainer(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  return (\n    a.data.current.sortable.containerId === b.data.current.sortable.containerId\n  );\n}\n\nfunction isAfter(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  if (!isSameContainer(a, b)) {\n    return false;\n  }\n\n  return a.data.current.sortable.index < b.data.current.sortable.index;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}