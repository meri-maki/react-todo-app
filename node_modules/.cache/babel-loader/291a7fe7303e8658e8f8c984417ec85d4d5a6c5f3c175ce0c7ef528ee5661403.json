{"ast":null,"code":"import writeText from 'copy-to-clipboard';\nimport { useCallback } from 'react';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\nvar useCopyToClipboard = function () {\n  var isMounted = useMountedState();\n  var _a = useSetState({\n      value: undefined,\n      error: undefined,\n      noUserInteraction: true\n    }),\n    state = _a[0],\n    setState = _a[1];\n  var copyToClipboard = useCallback(function (value) {\n    if (!isMounted()) {\n      return;\n    }\n    var noUserInteraction;\n    var normalizedValue;\n    try {\n      // only strings and numbers casted to strings can be copied to clipboard\n      if (typeof value !== 'string' && typeof value !== 'number') {\n        var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n        if (process.env.NODE_ENV === 'development') console.error(error);\n        setState({\n          value: value,\n          error: error,\n          noUserInteraction: true\n        });\n        return;\n      }\n      // empty strings are also considered invalid\n      else if (value === '') {\n        var error = new Error(\"Cannot copy empty string to clipboard.\");\n        if (process.env.NODE_ENV === 'development') console.error(error);\n        setState({\n          value: value,\n          error: error,\n          noUserInteraction: true\n        });\n        return;\n      }\n      normalizedValue = value.toString();\n      noUserInteraction = writeText(normalizedValue);\n      setState({\n        value: normalizedValue,\n        error: undefined,\n        noUserInteraction: noUserInteraction\n      });\n    } catch (error) {\n      setState({\n        value: normalizedValue,\n        error: error,\n        noUserInteraction: noUserInteraction\n      });\n    }\n  }, []);\n  return [state, copyToClipboard];\n};\nexport default useCopyToClipboard;","map":{"version":3,"names":["writeText","useCallback","useMountedState","useSetState","useCopyToClipboard","isMounted","_a","value","undefined","error","noUserInteraction","state","setState","copyToClipboard","normalizedValue","Error","process","env","NODE_ENV","console","toString"],"sources":["/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/react-use/esm/useCopyToClipboard.js"],"sourcesContent":["import writeText from 'copy-to-clipboard';\nimport { useCallback } from 'react';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\nvar useCopyToClipboard = function () {\n    var isMounted = useMountedState();\n    var _a = useSetState({\n        value: undefined,\n        error: undefined,\n        noUserInteraction: true,\n    }), state = _a[0], setState = _a[1];\n    var copyToClipboard = useCallback(function (value) {\n        if (!isMounted()) {\n            return;\n        }\n        var noUserInteraction;\n        var normalizedValue;\n        try {\n            // only strings and numbers casted to strings can be copied to clipboard\n            if (typeof value !== 'string' && typeof value !== 'number') {\n                var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n                if (process.env.NODE_ENV === 'development')\n                    console.error(error);\n                setState({\n                    value: value,\n                    error: error,\n                    noUserInteraction: true,\n                });\n                return;\n            }\n            // empty strings are also considered invalid\n            else if (value === '') {\n                var error = new Error(\"Cannot copy empty string to clipboard.\");\n                if (process.env.NODE_ENV === 'development')\n                    console.error(error);\n                setState({\n                    value: value,\n                    error: error,\n                    noUserInteraction: true,\n                });\n                return;\n            }\n            normalizedValue = value.toString();\n            noUserInteraction = writeText(normalizedValue);\n            setState({\n                value: normalizedValue,\n                error: undefined,\n                noUserInteraction: noUserInteraction,\n            });\n        }\n        catch (error) {\n            setState({\n                value: normalizedValue,\n                error: error,\n                noUserInteraction: noUserInteraction,\n            });\n        }\n    }, []);\n    return [state, copyToClipboard];\n};\nexport default useCopyToClipboard;\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,mBAAmB;AACzC,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,WAAW,MAAM,eAAe;AACvC,IAAIC,kBAAkB,GAAG,YAAY;EACjC,IAAIC,SAAS,GAAGH,eAAe,EAAE;EACjC,IAAII,EAAE,GAAGH,WAAW,CAAC;MACjBI,KAAK,EAAEC,SAAS;MAChBC,KAAK,EAAED,SAAS;MAChBE,iBAAiB,EAAE;IACvB,CAAC,CAAC;IAAEC,KAAK,GAAGL,EAAE,CAAC,CAAC,CAAC;IAAEM,QAAQ,GAAGN,EAAE,CAAC,CAAC,CAAC;EACnC,IAAIO,eAAe,GAAGZ,WAAW,CAAC,UAAUM,KAAK,EAAE;IAC/C,IAAI,CAACF,SAAS,EAAE,EAAE;MACd;IACJ;IACA,IAAIK,iBAAiB;IACrB,IAAII,eAAe;IACnB,IAAI;MACA;MACA,IAAI,OAAOP,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACxD,IAAIE,KAAK,GAAG,IAAIM,KAAK,CAAC,qBAAqB,GAAG,OAAOR,KAAK,GAAG,iCAAiC,CAAC;QAC/F,IAAIS,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EACtCC,OAAO,CAACV,KAAK,CAACA,KAAK,CAAC;QACxBG,QAAQ,CAAC;UACLL,KAAK,EAAEA,KAAK;UACZE,KAAK,EAAEA,KAAK;UACZC,iBAAiB,EAAE;QACvB,CAAC,CAAC;QACF;MACJ;MACA;MAAA,KACK,IAAIH,KAAK,KAAK,EAAE,EAAE;QACnB,IAAIE,KAAK,GAAG,IAAIM,KAAK,CAAC,wCAAwC,CAAC;QAC/D,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EACtCC,OAAO,CAACV,KAAK,CAACA,KAAK,CAAC;QACxBG,QAAQ,CAAC;UACLL,KAAK,EAAEA,KAAK;UACZE,KAAK,EAAEA,KAAK;UACZC,iBAAiB,EAAE;QACvB,CAAC,CAAC;QACF;MACJ;MACAI,eAAe,GAAGP,KAAK,CAACa,QAAQ,EAAE;MAClCV,iBAAiB,GAAGV,SAAS,CAACc,eAAe,CAAC;MAC9CF,QAAQ,CAAC;QACLL,KAAK,EAAEO,eAAe;QACtBL,KAAK,EAAED,SAAS;QAChBE,iBAAiB,EAAEA;MACvB,CAAC,CAAC;IACN,CAAC,CACD,OAAOD,KAAK,EAAE;MACVG,QAAQ,CAAC;QACLL,KAAK,EAAEO,eAAe;QACtBL,KAAK,EAAEA,KAAK;QACZC,iBAAiB,EAAEA;MACvB,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACC,KAAK,EAAEE,eAAe,CAAC;AACnC,CAAC;AACD,eAAeT,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}