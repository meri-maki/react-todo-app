{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport useUpdate from './useUpdate';\nimport { resolveHookState } from './misc/hookState';\nfunction useList(initialList) {\n  if (initialList === void 0) {\n    initialList = [];\n  }\n  var list = useRef(resolveHookState(initialList));\n  var update = useUpdate();\n  var actions = useMemo(function () {\n    var a = {\n      set: function (newList) {\n        list.current = resolveHookState(newList, list.current);\n        update();\n      },\n      push: function () {\n        var items = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          items[_i] = arguments[_i];\n        }\n        items.length && actions.set(function (curr) {\n          return curr.concat(items);\n        });\n      },\n      updateAt: function (index, item) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          arr[index] = item;\n          return arr;\n        });\n      },\n      insertAt: function (index, item) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          index > arr.length ? arr[index] = item : arr.splice(index, 0, item);\n          return arr;\n        });\n      },\n      update: function (predicate, newItem) {\n        actions.set(function (curr) {\n          return curr.map(function (item) {\n            return predicate(item, newItem) ? newItem : item;\n          });\n        });\n      },\n      updateFirst: function (predicate, newItem) {\n        var index = list.current.findIndex(function (item) {\n          return predicate(item, newItem);\n        });\n        index >= 0 && actions.updateAt(index, newItem);\n      },\n      upsert: function (predicate, newItem) {\n        var index = list.current.findIndex(function (item) {\n          return predicate(item, newItem);\n        });\n        index >= 0 ? actions.updateAt(index, newItem) : actions.push(newItem);\n      },\n      sort: function (compareFn) {\n        actions.set(function (curr) {\n          return curr.slice().sort(compareFn);\n        });\n      },\n      filter: function (callbackFn, thisArg) {\n        actions.set(function (curr) {\n          return curr.slice().filter(callbackFn, thisArg);\n        });\n      },\n      removeAt: function (index) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          arr.splice(index, 1);\n          return arr;\n        });\n      },\n      clear: function () {\n        actions.set([]);\n      },\n      reset: function () {\n        actions.set(resolveHookState(initialList).slice());\n      }\n    };\n    /**\n     * @deprecated Use removeAt method instead\n     */\n    a.remove = a.removeAt;\n    return a;\n  }, []);\n  return [list.current, actions];\n}\nexport default useList;","map":{"version":3,"names":["useMemo","useRef","useUpdate","resolveHookState","useList","initialList","list","update","actions","a","set","newList","current","push","items","_i","arguments","length","curr","concat","updateAt","index","item","arr","slice","insertAt","splice","predicate","newItem","map","updateFirst","findIndex","upsert","sort","compareFn","filter","callbackFn","thisArg","removeAt","clear","reset","remove"],"sources":["/Users/anastasiazhuravleva/CODING/PROJECTS/todo-app-v5/node_modules/react-use/esm/useList.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport useUpdate from './useUpdate';\nimport { resolveHookState } from './misc/hookState';\nfunction useList(initialList) {\n    if (initialList === void 0) { initialList = []; }\n    var list = useRef(resolveHookState(initialList));\n    var update = useUpdate();\n    var actions = useMemo(function () {\n        var a = {\n            set: function (newList) {\n                list.current = resolveHookState(newList, list.current);\n                update();\n            },\n            push: function () {\n                var items = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    items[_i] = arguments[_i];\n                }\n                items.length && actions.set(function (curr) { return curr.concat(items); });\n            },\n            updateAt: function (index, item) {\n                actions.set(function (curr) {\n                    var arr = curr.slice();\n                    arr[index] = item;\n                    return arr;\n                });\n            },\n            insertAt: function (index, item) {\n                actions.set(function (curr) {\n                    var arr = curr.slice();\n                    index > arr.length ? (arr[index] = item) : arr.splice(index, 0, item);\n                    return arr;\n                });\n            },\n            update: function (predicate, newItem) {\n                actions.set(function (curr) { return curr.map(function (item) { return (predicate(item, newItem) ? newItem : item); }); });\n            },\n            updateFirst: function (predicate, newItem) {\n                var index = list.current.findIndex(function (item) { return predicate(item, newItem); });\n                index >= 0 && actions.updateAt(index, newItem);\n            },\n            upsert: function (predicate, newItem) {\n                var index = list.current.findIndex(function (item) { return predicate(item, newItem); });\n                index >= 0 ? actions.updateAt(index, newItem) : actions.push(newItem);\n            },\n            sort: function (compareFn) {\n                actions.set(function (curr) { return curr.slice().sort(compareFn); });\n            },\n            filter: function (callbackFn, thisArg) {\n                actions.set(function (curr) { return curr.slice().filter(callbackFn, thisArg); });\n            },\n            removeAt: function (index) {\n                actions.set(function (curr) {\n                    var arr = curr.slice();\n                    arr.splice(index, 1);\n                    return arr;\n                });\n            },\n            clear: function () {\n                actions.set([]);\n            },\n            reset: function () {\n                actions.set(resolveHookState(initialList).slice());\n            },\n        };\n        /**\n         * @deprecated Use removeAt method instead\n         */\n        a.remove = a.removeAt;\n        return a;\n    }, []);\n    return [list.current, actions];\n}\nexport default useList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}